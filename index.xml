<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redox - Your Next(Gen) OS</title>
    <link>http://redox-os.github.io/</link>
    <description>Recent content on Redox - Your Next(Gen) OS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Sep 2015 18:11:35 +0200</lastBuildDate>
    <atom:link href="http://redox-os.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>And So It Beginsâ€¦</title>
      <link>http://redox-os.github.io/blog/hello-world/</link>
      <pubDate>Sat, 12 Sep 2015 18:11:35 +0200</pubDate>
      
      <guid>http://redox-os.github.io/blog/hello-world/</guid>
      <description>&lt;p&gt;Redox development has been a long and arduous process, spanning several months
of breaking things until they are fixed.&lt;/p&gt;

&lt;p&gt;On came the compiler errors, which meant the kernel had to be linked as an ELF
file, because the compiler had moved other functions above the entry function,
and SSE had to be disabled to prevent aligned memory operations from being done
on the stack pointer, because the compiler had decided to do that too. Some bugs
went away after completely unrelated lines of code were changed, which led
the compiler to make different optimization decisions. Most compiler
optimizations had to be disabled, and a custom link script used to avoid
compiler errors.&lt;/p&gt;

&lt;p&gt;There was the transition to real hardware, and with it the realization that very
few virtualization platforms implement the hardware faithfully, and very few
manufacturer specifications are complete and correct. Sometimes the only
reference for the &amp;lsquo;correct&amp;rsquo; way of doing things is deep in the Linux source
code. Often, device drivers would work on Qemu, but not VirtualBox, or on
VirtualBox, but not real hardware.&lt;/p&gt;

&lt;p&gt;Also, there was a discovery of bugs in critical areas, the IDE driver,
the realloc function, the URL object, the list goes on. Discovery of these
requires a complete understanding of the Redox source, and an investigation
of the disassembly of the entire kernel, instruction by instruction. Some bugs
disappeared when debugging output was added, the side effects of debugging only
being different timing of instructions.&lt;/p&gt;

&lt;p&gt;This blog is to chart the journey of discovery and rediscovery on my path of
developing Redox, a Rust operating system. Most posts will be about new
progress, some will be old anecdotes. All will be focused on demonstrating
the plight of the not-so-humble operating system developer, who is often too far
buried in principle or ego to discover their mistakes, or to replace them with
sometimes compromising solutions.&lt;/p&gt;

&lt;p&gt;In the end, I hope to develop something that proves that Rust can be
a full-stack solution, from operating system to device drivers to user
applications, or fail spectacularly at doing so. What I have made already
supports some of these goals, with an X11-like windowing system, a VFS based
filesystem and network stack, and ELF file loading and virtual memory management
for user programs.&lt;/p&gt;

&lt;p&gt;I hope you enjoy this as much as I do,&lt;/p&gt;

&lt;p&gt;Jeremy Soller&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redox way</title>
      <link>http://redox-os.github.io/manifesto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redox-os.github.io/manifesto/</guid>
      <description>

&lt;p&gt;Idealism, ego, and narcissism are often ingredients constructing
the not-so-humble OS developer. A short study of Linus Torvalds&amp;rsquo; public comments
is one of the recommended curriculum when attempting to divine the true
motivations of someone who would decide to defenestrate other extensively used,
widely documented, and extremely inexpensive Operating Systems in favor
of reinventing the wheel (we need more spokes in userspace!).&lt;/p&gt;

&lt;p&gt;All that aside, I realize the importance of a project as large as this to define
some rationale for its existence, and some vision for its future.&lt;/p&gt;

&lt;p&gt;To start, perhaps a riddle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is black and blue, but never true?&lt;/li&gt;
&lt;li&gt;What is red and green, but cannot be seen?&lt;/li&gt;
&lt;li&gt;What is orange and yellow, but not so mellow?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don&amp;rsquo;t actually have an answer to that one, so good luck.&lt;/p&gt;

&lt;p&gt;There is a question I do have an answer to, though:&lt;/p&gt;

&lt;h2 id=&#34;what-is-redox:5891c44005928acbbb7fd1868bbfb3f4&#34;&gt;What is Redox?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Redox is an operating system.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redox is written mostly in Rust&lt;/strong&gt;, with a few x86 assembler files in
the bootloader and protected mode initialization. There is inline assembly
to deal with system calls, port access, and virtual memory, but it is very
succinct.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redox embraces Unix philosophy&lt;/strong&gt;, where many interfaces are accessible in
the virtual filesystem, the binary interface is lightweight and portable,
and text files are used for configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redox prioritizes the User.&lt;/strong&gt; Safety is the most important innovation of Rust,
and Redox is attempting to use that innovation to provide a more stable
and secure experience without compromising user experience. Programs and drivers
are sandboxed, and the user is left in the highest privilege position.&lt;/p&gt;

&lt;p&gt;This page will be updated to further explain the foundational principles of
Redox, once I have finished writing some code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>