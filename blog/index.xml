<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Redox - Your Next(Gen) OS</title>
    <link>http://www.redox-os.org/blog/</link>
    <description>Recent content in Blogs on Redox - Your Next(Gen) OS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Oct 2015 16:42:56 +0200</lastBuildDate>
    <atom:link href="http://www.redox-os.org/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>fired - fast init system</title>
      <link>http://www.redox-os.org/blog/fired-fast-init-system/</link>
      <pubDate>Tue, 06 Oct 2015 16:42:56 +0200</pubDate>
      
      <guid>http://www.redox-os.org/blog/fired-fast-init-system/</guid>
      <description>

&lt;p&gt;&lt;code&gt;fired&lt;/code&gt; is brand new init system created for Redox OS. It should provide easy
way to run, manage and supervise all processes inside Redox.&lt;/p&gt;

&lt;h2 id=&#34;design-principles:bd458ca17a8a070d9765d0bc1efcfcbf&#34;&gt;Design principles&lt;/h2&gt;

&lt;p&gt;Main design principles are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn from other init systems what to do:

&lt;ul&gt;
&lt;li&gt;simple and readable configuration files instead of bloated shell scripts (we
want to use &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;Toml&lt;/a&gt; as configuration language)&lt;/li&gt;
&lt;li&gt;keep PID 1 minimal as possible&lt;/li&gt;
&lt;li&gt;run services in parallel&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Learn from other init systems what not to do

&lt;ul&gt;
&lt;li&gt;be *NIX way, make one thing and do it good&lt;/li&gt;
&lt;li&gt;depend on kernel only&lt;/li&gt;
&lt;li&gt;do not bind to &amp;ldquo;only one true&amp;rdquo; libc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the features will be possible due to unique Redox design principle that
&lt;a href=&#34;https://github.com/redox-os/redox/wiki/URL&#34;&gt;everything is an URL&lt;/a&gt;. Thanks to that principle logging will be done via
&lt;code&gt;log://&lt;/code&gt; URL that will be easy readable by any log aggregating tool that one
wants, deaemons will provide their status via &lt;code&gt;bus://&lt;/code&gt; URL (or similar, design
process is still on the go), etc. On the other hand it will make &lt;code&gt;fired&lt;/code&gt; much
harder to port to other *NIX platforms, although we will be really happy to see
if there is someone who will help us creating that possible.&lt;/p&gt;

&lt;h2 id=&#34;why-not-existing-one:bd458ca17a8a070d9765d0bc1efcfcbf&#34;&gt;Why not existing one?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We are writing Redox kernel in Rust, so why we should use C in user space? We
want all system tooling to be as safe as possible in Rust.&lt;/li&gt;
&lt;li&gt;All existing init systems are write for systems with other design principles.
In Redox everything is URL so we should use that. Instead of sockets/pipes
magic we have built in tool that will solve all problems with IPC.&lt;/li&gt;
&lt;li&gt;Nothing what we found is simple enough or modern enough to fit into our needs.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>And So It Beginsâ€¦</title>
      <link>http://www.redox-os.org/blog/hello-world/</link>
      <pubDate>Sat, 12 Sep 2015 18:11:35 +0200</pubDate>
      
      <guid>http://www.redox-os.org/blog/hello-world/</guid>
      <description>&lt;p&gt;Redox development has been a long and arduous process, spanning several months
of breaking things until they are fixed.&lt;/p&gt;

&lt;p&gt;On came the compiler errors, which meant the kernel had to be linked as an ELF
file, because the compiler had moved other functions above the entry function,
and SSE had to be disabled to prevent aligned memory operations from being done
on the stack pointer, because the compiler had decided to do that too. Some bugs
went away after completely unrelated lines of code were changed, which led
the compiler to make different optimization decisions. Most compiler
optimizations had to be disabled, and a custom link script used to avoid
compiler errors.&lt;/p&gt;

&lt;p&gt;There was the transition to real hardware, and with it the realization that very
few virtualization platforms implement the hardware faithfully, and very few
manufacturer specifications are complete and correct. Sometimes the only
reference for the &amp;lsquo;correct&amp;rsquo; way of doing things is deep in the Linux source
code. Often, device drivers would work on Qemu, but not VirtualBox, or on
VirtualBox, but not real hardware.&lt;/p&gt;

&lt;p&gt;Also, there was a discovery of bugs in critical areas, the IDE driver,
the realloc function, the URL object, the list goes on. Discovery of these
requires a complete understanding of the Redox source, and an investigation
of the disassembly of the entire kernel, instruction by instruction. Some bugs
disappeared when debugging output was added, the side effects of debugging only
being different timing of instructions.&lt;/p&gt;

&lt;p&gt;This blog is to chart the journey of discovery and rediscovery on my path of
developing Redox, a Rust operating system. Most posts will be about new
progress, some will be old anecdotes. All will be focused on demonstrating
the plight of the not-so-humble operating system developer, who is often too far
buried in principle or ego to discover their mistakes, or to replace them with
sometimes compromising solutions.&lt;/p&gt;

&lt;p&gt;In the end, I hope to develop something that proves that Rust can be
a full-stack solution, from operating system to device drivers to user
applications, or fail spectacularly at doing so. What I have made already
supports some of these goals, with an X11-like windowing system, a VFS based
filesystem and network stack, and ELF file loading and virtual memory management
for user programs.&lt;/p&gt;

&lt;p&gt;I hope you enjoy this as much as I do,&lt;/p&gt;

&lt;p&gt;Jeremy Soller&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>